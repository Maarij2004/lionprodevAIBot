{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lionprodev\\\\frontend\\\\lionprodev\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [promptArea, setPromptArea] = useState('');\n  const [chatHistory, setChatHistory] = useState([{\n    sender: 'bot',\n    message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.',\n    lang: 'en'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatHistory]);\n\n  // Simple language detection helper (could be improved)\n  function detectLanguage(text) {\n    return /[\\u0600-\\u06FF]/.test(text) ? 'ar' : 'en';\n  }\n\n  // Call your translation API or OpenAI to translate text\n  async function translateText(text, fromLang, toLang) {\n    // Example with OpenAI translation call (pseudo code):\n    // Replace this with your actual translation API call\n    // You can also call your backend endpoint for translation\n\n    const prompt = `Translate this text from ${fromLang === 'ar' ? 'Arabic' : 'English'} to ${toLang === 'ar' ? 'Arabic' : 'English'}:\\n\\n${text}`;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer YOUR_OPENAI_API_KEY`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [{\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 1000\n      })\n    });\n    const data = await response.json();\n    return data.choices[0].message.content.trim();\n  }\n  const handleSubmit = async () => {\n    const userMessage = promptArea.trim();\n    if (!userMessage) return;\n    setChatHistory(prev => [...prev, {\n      sender: 'user',\n      message: userMessage,\n      lang: detectLanguage(userMessage)\n    }]);\n    setPromptArea('');\n    setIsLoading(true);\n    const url = 'http://localhost:3050/api/prompt';\n    let tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: userMessage\n        })\n      });\n      if (!response.body) throw new Error('No response body');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        tmpPromptResponse += decoder.decode(value, {\n          stream: true\n        });\n      }\n      tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '').replace(/\\n/g, '<br />');\n\n      // Detect language of bot response\n      const botLang = detectLanguage(tmpPromptResponse);\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: tmpPromptResponse,\n        originalMessage: tmpPromptResponse,\n        translatedMessage: null,\n        lang: botLang\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: 'Error communicating with the server.',\n        lang: 'en'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  // Toggle translation for bot message at index i\n  const toggleTranslation = async index => {\n    setChatHistory(prev => {\n      const newHistory = [...prev];\n      const msg = newHistory[index];\n      if (!msg.translatedMessage) {\n        // No translation yet, fetch it\n        const fromLang = msg.lang;\n        const toLang = fromLang === 'ar' ? 'en' : 'ar';\n\n        // Show loading while translating (optional)\n        msg.message = '<i>Translating...</i>';\n        setChatHistory([...newHistory]);\n        translateText(msg.originalMessage, fromLang, toLang).then(translated => {\n          newHistory[index] = {\n            ...msg,\n            translatedMessage: translated.replace(/\\n/g, '<br />'),\n            message: translated.replace(/\\n/g, '<br />')\n          };\n          setChatHistory(newHistory);\n        });\n        return newHistory;\n      } else {\n        // Toggle between original and translated\n        if (msg.message === msg.originalMessage) {\n          msg.message = msg.translatedMessage;\n        } else {\n          msg.message = msg.originalMessage;\n        }\n        return newHistory;\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat with Our AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: msg.message\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), msg.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"translate-btn\",\n              onClick: () => toggleTranslation(index),\n              children: \"Translate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"input-textarea\",\n          rows: 2,\n          placeholder: \"Type your message...\",\n          onChange: e => setPromptArea(e.target.value),\n          value: promptArea,\n          onKeyDown: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSubmit,\n          disabled: isLoading,\n          children: isLoading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+uFUxO5gETDIEvRyyHO46+Ce/B4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","promptArea","setPromptArea","chatHistory","setChatHistory","sender","message","lang","isLoading","setIsLoading","messagesEndRef","current","scrollIntoView","behavior","detectLanguage","text","test","translateText","fromLang","toLang","prompt","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","max_tokens","data","json","choices","trim","handleSubmit","userMessage","prev","url","tmpPromptResponse","Error","reader","getReader","decoder","TextDecoder","value","done","read","decode","stream","replace","botLang","originalMessage","translatedMessage","error","console","handleKeyPress","e","key","shiftKey","preventDefault","toggleTranslation","index","newHistory","msg","then","translated","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","dangerouslySetInnerHTML","__html","onClick","ref","rows","placeholder","onChange","target","onKeyDown","disabled","_c","$RefreshReg$"],"sources":["D:/Lionprodev/frontend/lionprodev/src/App.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [promptArea, setPromptArea] = useState('');\n  const [chatHistory, setChatHistory] = useState([\n    { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.', lang: 'en' },\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatHistory]);\n\n  // Simple language detection helper (could be improved)\n  function detectLanguage(text) {\n    return /[\\u0600-\\u06FF]/.test(text) ? 'ar' : 'en';\n  }\n\n  // Call your translation API or OpenAI to translate text\n  async function translateText(text, fromLang, toLang) {\n    // Example with OpenAI translation call (pseudo code):\n    // Replace this with your actual translation API call\n    // You can also call your backend endpoint for translation\n\n    const prompt = `Translate this text from ${fromLang === 'ar' ? 'Arabic' : 'English'} to ${\n      toLang === 'ar' ? 'Arabic' : 'English'\n    }:\\n\\n${text}`;\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer YOUR_OPENAI_API_KEY`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 1000,\n      }),\n    });\n\n    const data = await response.json();\n    return data.choices[0].message.content.trim();\n  }\n\n  const handleSubmit = async () => {\n    const userMessage = promptArea.trim();\n    if (!userMessage) return;\n\n    setChatHistory((prev) => [\n      ...prev,\n      { sender: 'user', message: userMessage, lang: detectLanguage(userMessage) },\n    ]);\n    setPromptArea('');\n    setIsLoading(true);\n\n    const url = 'http://localhost:3050/api/prompt';\n    let tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: userMessage }),\n      });\n\n      if (!response.body) throw new Error('No response body');\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n        tmpPromptResponse += decoder.decode(value, { stream: true });\n      }\n\n      tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '').replace(/\\n/g, '<br />');\n\n      // Detect language of bot response\n      const botLang = detectLanguage(tmpPromptResponse);\n\n      setChatHistory((prev) => [\n        ...prev,\n        { sender: 'bot', message: tmpPromptResponse, originalMessage: tmpPromptResponse, translatedMessage: null, lang: botLang },\n      ]);\n    } catch (error) {\n      console.error('Error:', error);\n      setChatHistory((prev) => [\n        ...prev,\n        { sender: 'bot', message: 'Error communicating with the server.', lang: 'en' },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  // Toggle translation for bot message at index i\n  const toggleTranslation = async (index) => {\n    setChatHistory((prev) => {\n      const newHistory = [...prev];\n      const msg = newHistory[index];\n\n      if (!msg.translatedMessage) {\n        // No translation yet, fetch it\n        const fromLang = msg.lang;\n        const toLang = fromLang === 'ar' ? 'en' : 'ar';\n\n        // Show loading while translating (optional)\n        msg.message = '<i>Translating...</i>';\n        setChatHistory([...newHistory]);\n\n        translateText(msg.originalMessage, fromLang, toLang).then((translated) => {\n          newHistory[index] = {\n            ...msg,\n            translatedMessage: translated.replace(/\\n/g, '<br />'),\n            message: translated.replace(/\\n/g, '<br />'),\n          };\n          setChatHistory(newHistory);\n        });\n\n        return newHistory;\n      } else {\n        // Toggle between original and translated\n        if (msg.message === msg.originalMessage) {\n          msg.message = msg.translatedMessage;\n        } else {\n          msg.message = msg.originalMessage;\n        }\n        return newHistory;\n      }\n    });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-card\">\n        <div className=\"chat-header\">\n          <h2>Chat with Our AI</h2>\n        </div>\n        <div className=\"chat-box\">\n          <div className=\"messages\">\n            {chatHistory.map((msg, index) => (\n              <div key={index} className={`message ${msg.sender}`}>\n                <div dangerouslySetInnerHTML={{ __html: msg.message }}></div>\n                {msg.sender === 'bot' && (\n                  <button className=\"translate-btn\" onClick={() => toggleTranslation(index)}>\n                    Translate\n                  </button>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n        <div className=\"chat-input\">\n          <textarea\n            className=\"input-textarea\"\n            rows={2}\n            placeholder=\"Type your message...\"\n            onChange={(e) => setPromptArea(e.target.value)}\n            value={promptArea}\n            onKeyDown={handleKeyPress}\n          />\n          <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n            {isLoading ? 'Sending...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}