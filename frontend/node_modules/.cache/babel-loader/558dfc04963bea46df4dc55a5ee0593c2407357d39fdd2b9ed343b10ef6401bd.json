{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lionprodev\\\\frontend\\\\lionprodev\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [promptArea, setPromptArea] = useState('');\n  const [chatHistory, setChatHistory] = useState([{\n    sender: 'bot',\n    message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTranslated, setIsTranslated] = useState(false);\n  const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n  // Auto-scroll to the bottom whenever the chatHistory changes\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatHistory]);\n  const handleSubmit = async () => {\n    const userMessage = promptArea.trim();\n    if (!userMessage) return;\n\n    // Add user's message to chat history\n    setChatHistory(prev => [...prev, {\n      sender: 'user',\n      message: userMessage\n    }]);\n    setPromptArea(''); // Clear the input after submitting\n    setIsLoading(true); // Start loading\n\n    const url = 'http://localhost:3050/api/prompt';\n    let tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: userMessage\n        })\n      });\n      if (!response.body) throw new Error('No response body');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        tmpPromptResponse += decoder.decode(value, {\n          stream: true\n        });\n      }\n\n      // Once the full response is received, update the state\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: tmpPromptResponse\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: 'Error communicating with the server.'\n      }]);\n    } finally {\n      setIsLoading(false); // End loading\n    }\n  };\n  const handleTranslate = async (text, targetLanguage) => {\n    const url = 'http://localhost:3050/api/translate';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text,\n          target_language: targetLanguage\n        })\n      });\n      const data = await response.json();\n      return data.translated_text;\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleTranslateButtonClick = async (message, sender) => {\n    if (sender === 'bot' && !isTranslated) {\n      const translatedMessage = await handleTranslate(message, 'ar');\n      setChatHistory(prev => prev.map(msg => msg === message ? {\n        ...msg,\n        message: translatedMessage\n      } : msg));\n      setIsTranslated(true);\n    } else {\n      // Revert to original text or handle reverse translation\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n      handleSubmit();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat with Our AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            dangerouslySetInnerHTML: {\n              __html: msg.message\n            } // Render message with HTML (line breaks)\n            ,\n            children: msg.sender === 'bot' && !isTranslated && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTranslateButtonClick(msg.message, msg.sender),\n              children: \"Translate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"input-textarea\",\n          rows: 2,\n          placeholder: \"Type your message...\",\n          onChange: e => setPromptArea(e.target.value),\n          value: promptArea,\n          onKeyDown: handleKeyPress // Listen for Enter key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSubmit,\n          disabled: isLoading,\n          children: isLoading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"mP7kLi0NvvJ8Wti4PEbaOcMDgAs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","promptArea","setPromptArea","chatHistory","setChatHistory","sender","message","isLoading","setIsLoading","isTranslated","setIsTranslated","messagesEndRef","current","scrollIntoView","behavior","handleSubmit","userMessage","trim","prev","url","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","Error","reader","getReader","decoder","TextDecoder","value","done","read","decode","stream","error","console","handleTranslate","text","targetLanguage","target_language","data","json","translated_text","handleTranslateButtonClick","translatedMessage","map","msg","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","dangerouslySetInnerHTML","__html","onClick","ref","rows","placeholder","onChange","target","onKeyDown","disabled","_c","$RefreshReg$"],"sources":["D:/Lionprodev/frontend/lionprodev/src/App.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [promptArea, setPromptArea] = useState('');\n    const [chatHistory, setChatHistory] = useState([\n        { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n    ]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isTranslated, setIsTranslated] = useState(false);\n    const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n    // Auto-scroll to the bottom whenever the chatHistory changes\n    useEffect(() => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatHistory]);\n\n    const handleSubmit = async () => {\n        const userMessage = promptArea.trim();\n        if (!userMessage) return;\n\n        // Add user's message to chat history\n        setChatHistory((prev) => [\n            ...prev,\n            { sender: 'user', message: userMessage },\n        ]);\n        setPromptArea(''); // Clear the input after submitting\n        setIsLoading(true); // Start loading\n\n        const url = 'http://localhost:3050/api/prompt';\n        let tmpPromptResponse = '';\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ prompt: userMessage }),\n            });\n\n            if (!response.body) throw new Error('No response body');\n\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { value, done } = await reader.read();\n                if (done) break;\n\n                tmpPromptResponse += decoder.decode(value, { stream: true });\n            }\n\n            // Once the full response is received, update the state\n            setChatHistory((prev) => [\n                ...prev,\n                { sender: 'bot', message: tmpPromptResponse },\n            ]);\n        } catch (error) {\n            console.error('Error:', error);\n            setChatHistory((prev) => [\n                ...prev,\n                { sender: 'bot', message: 'Error communicating with the server.' },\n            ]);\n        } finally {\n            setIsLoading(false); // End loading\n        }\n    };\n\n    const handleTranslate = async (text, targetLanguage) => {\n        const url = 'http://localhost:3050/api/translate';\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text, target_language: targetLanguage }),\n            });\n            const data = await response.json();\n            return data.translated_text;\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleTranslateButtonClick = async (message, sender) => {\n        if (sender === 'bot' && !isTranslated) {\n            const translatedMessage = await handleTranslate(message, 'ar');\n            setChatHistory((prev) =>\n                prev.map((msg) =>\n                    msg === message\n                        ? { ...msg, message: translatedMessage }\n                        : msg\n                )\n            );\n            setIsTranslated(true);\n        } else {\n            // Revert to original text or handle reverse translation\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n            handleSubmit();\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-card\">\n                <div className=\"chat-header\">\n                    <h2>Chat with Our AI</h2>\n                </div>\n                <div className=\"chat-box\">\n                    <div className=\"messages\">\n                        {chatHistory.map((msg, index) => (\n                            <div\n                                key={index}\n                                className={`message ${msg.sender}`}\n                                dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n                            >\n                                {msg.sender === 'bot' && !isTranslated && (\n                                    <button\n                                        onClick={() => handleTranslateButtonClick(msg.message, msg.sender)}\n                                    >\n                                        Translate\n                                    </button>\n                                )}\n                            </div>\n                        ))}\n                        <div ref={messagesEndRef} /> {/* Scroll reference */}\n                    </div>\n                </div>\n                <div className=\"chat-input\">\n                    <textarea\n                        className=\"input-textarea\"\n                        rows={2}\n                        placeholder=\"Type your message...\"\n                        onChange={(e) => setPromptArea(e.target.value)}\n                        value={promptArea}\n                        onKeyDown={handleKeyPress} // Listen for Enter key\n                    />\n                    <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n                        {isLoading ? 'Sending...' : 'Send'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}