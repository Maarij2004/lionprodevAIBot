{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lionprodev\\\\frontend\\\\lionprodev\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [promptArea, setPromptArea] = useState('');\n  const [chatHistory, setChatHistory] = useState([{\n    sender: 'bot',\n    message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleSubmit = async () => {\n    const userMessage = promptArea.trim();\n    if (!userMessage) return;\n\n    // Add user's message to chat history\n    setChatHistory(prev => [...prev, {\n      sender: 'user',\n      message: userMessage\n    }]);\n    setPromptArea(''); // Clear the input after submitting\n    setIsLoading(true); // Start loading\n\n    const url = 'http://localhost:3050/api/prompt';\n    let tmpPromptResponse = '';\n    let accumulatedText = '';\n    let lineCount = 0;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: userMessage\n        })\n      });\n      if (!response.body) throw new Error('No response body');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        accumulatedText += decoder.decode(value, {\n          stream: true\n        });\n\n        // Limit to 5-6 lines\n        const lines = accumulatedText.split('\\n');\n        if (lines.length >= 6) {\n          accumulatedText = lines.slice(0, 6).join('\\n');\n          break;\n        }\n      }\n\n      // Simulate letter-by-letter typing\n      let index = 0;\n      const interval = setInterval(() => {\n        tmpPromptResponse += accumulatedText[index];\n        setChatHistory(prev => [...prev, {\n          sender: 'bot',\n          message: tmpPromptResponse\n        }]);\n        index += 1;\n        if (index === accumulatedText.length) {\n          clearInterval(interval); // Stop the typing effect once complete\n          setIsLoading(false); // End loading\n        }\n      }, 100); // Adjust speed of the typing effect by changing this value\n    } catch (error) {\n      console.error('Error:', error);\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: 'Error communicating with the server.'\n      }]);\n      setIsLoading(false); // End loading\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat with Our AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"input-textarea\",\n          rows: 2,\n          placeholder: \"Type your message...\",\n          onChange: e => setPromptArea(e.target.value),\n          value: promptArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSubmit,\n          disabled: isLoading,\n          children: isLoading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"wwcddocza50qrTferFhamXz/ivY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","promptArea","setPromptArea","chatHistory","setChatHistory","sender","message","isLoading","setIsLoading","handleSubmit","userMessage","trim","prev","url","tmpPromptResponse","accumulatedText","lineCount","response","fetch","method","headers","body","JSON","stringify","prompt","Error","reader","getReader","decoder","TextDecoder","value","done","read","decode","stream","lines","split","length","slice","join","index","interval","setInterval","clearInterval","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","rows","placeholder","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Lionprodev/frontend/lionprodev/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [promptArea, setPromptArea] = useState('');\n    const [chatHistory, setChatHistory] = useState([\n        { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n    ]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleSubmit = async () => {\n        const userMessage = promptArea.trim();\n        if (!userMessage) return;\n\n        // Add user's message to chat history\n        setChatHistory((prev) => [\n            ...prev,\n            { sender: 'user', message: userMessage },\n        ]);\n        setPromptArea(''); // Clear the input after submitting\n        setIsLoading(true); // Start loading\n\n        const url = 'http://localhost:3050/api/prompt';\n        let tmpPromptResponse = '';\n        let accumulatedText = '';\n        let lineCount = 0;\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ prompt: userMessage }),\n            });\n\n            if (!response.body) throw new Error('No response body');\n\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { value, done } = await reader.read();\n                if (done) break;\n\n                accumulatedText += decoder.decode(value, { stream: true });\n\n                // Limit to 5-6 lines\n                const lines = accumulatedText.split('\\n');\n                if (lines.length >= 6) {\n                    accumulatedText = lines.slice(0, 6).join('\\n');\n                    break;\n                }\n            }\n\n            // Simulate letter-by-letter typing\n            let index = 0;\n            const interval = setInterval(() => {\n                tmpPromptResponse += accumulatedText[index];\n                setChatHistory((prev) => [\n                    ...prev,\n                    { sender: 'bot', message: tmpPromptResponse },\n                ]);\n\n                index += 1;\n\n                if (index === accumulatedText.length) {\n                    clearInterval(interval); // Stop the typing effect once complete\n                    setIsLoading(false); // End loading\n                }\n            }, 100); // Adjust speed of the typing effect by changing this value\n        } catch (error) {\n            console.error('Error:', error);\n            setChatHistory((prev) => [\n                ...prev,\n                { sender: 'bot', message: 'Error communicating with the server.' },\n            ]);\n            setIsLoading(false); // End loading\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-card\">\n                <div className=\"chat-header\">\n                    <h2>Chat with Our AI</h2>\n                </div>\n                <div className=\"chat-box\">\n                    <div className=\"messages\">\n                        {chatHistory.map((msg, index) => (\n                            <div\n                                key={index}\n                                className={`message ${msg.sender}`}\n                            >\n                                <p>{msg.message}</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"chat-input\">\n                    <textarea\n                        className=\"input-textarea\"\n                        rows={2}\n                        placeholder=\"Type your message...\"\n                        onChange={(e) => setPromptArea(e.target.value)}\n                        value={promptArea}\n                    />\n                    <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n                        {isLoading ? 'Sending...' : 'Send'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}