{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lionprodev\\\\frontend\\\\lionprodev\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n\n//             if (!response.body) throw new Error('No response body');\n\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Welcome to LION PRO DEV!',\n    isTitle: true\n  }, {\n    sender: 'bot',\n    text: 'How can we assist you today?',\n    isTitle: false\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(['Development', 'Design', 'Consulting']);\n  const handleOptionClick = option => {\n    setMessages([...messages, {\n      sender: 'user',\n      text: option,\n      isTitle: false\n    }, {\n      sender: 'bot',\n      text: `Excellent choice! Our ${option.toLowerCase()} team is ready to help.`,\n      isTitle: false\n    }]);\n    setOptions([]);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!inputValue.trim()) return;\n    setMessages([...messages, {\n      sender: 'user',\n      text: inputValue,\n      isTitle: false\n    }, {\n      sender: 'bot',\n      text: 'We\\'ll connect you with an expert shortly.',\n      isTitle: false\n    }]);\n    setInputValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lion-chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lion-chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lion-chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lion-brand\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lion-status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"LION PRO DEV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"lion-status-text\",\n            children: \"Active Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lion-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `lion-message ${msg.sender}`,\n          children: [msg.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lion-avatar\",\n            children: \"LP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lion-message-content\",\n            children: [msg.sender === 'bot' && msg.isTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"lion-bot-title\",\n              children: \"LION PRO BOT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"lion-message-text\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)), options.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lion-options\",\n          children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"lion-option-btn\",\n            onClick: () => handleOptionClick(option),\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"lion-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Message LION PRO DEV...\",\n          className: \"lion-message-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lion-footer\",\n          children: \"\\xA9 2023 LION PRO DEV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"P4/wfZA1t8dju/GW2+4KXsiIliw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","messages","setMessages","sender","text","isTitle","inputValue","setInputValue","options","setOptions","handleOptionClick","option","toLowerCase","handleSubmit","e","preventDefault","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","length","onClick","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["D:/Lionprodev/frontend/lionprodev/src/App.js"],"sourcesContent":["// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n\n//             if (!response.body) throw new Error('No response body');\n\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'Welcome to LION PRO DEV!', isTitle: true },\n    { sender: 'bot', text: 'How can we assist you today?', isTitle: false },\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(['Development', 'Design', 'Consulting']);\n\n  const handleOptionClick = (option) => {\n    setMessages([...messages, \n      { sender: 'user', text: option, isTitle: false },\n      { sender: 'bot', text: `Excellent choice! Our ${option.toLowerCase()} team is ready to help.`, isTitle: false }\n    ]);\n    setOptions([]);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!inputValue.trim()) return;\n    \n    setMessages([...messages, \n      { sender: 'user', text: inputValue, isTitle: false },\n      { sender: 'bot', text: 'We\\'ll connect you with an expert shortly.', isTitle: false }\n    ]);\n    setInputValue('');\n  };\n\n  return (\n    <div className=\"lion-chat-container\">\n      <div className=\"lion-chat-window\">\n        <div className=\"lion-chat-header\">\n          <div className=\"lion-brand\">\n            <div className=\"lion-status\"></div>\n            <h2>LION PRO DEV</h2>\n            <span className=\"lion-status-text\">Active Now</span>\n          </div>\n        </div>\n        \n        <div className=\"lion-messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`lion-message ${msg.sender}`}>\n              {msg.sender === 'bot' && (\n                <div className=\"lion-avatar\">LP</div>\n              )}\n              <div className=\"lion-message-content\">\n                {msg.sender === 'bot' && msg.isTitle && (\n                  <div className=\"lion-bot-title\">LION PRO BOT</div>\n                )}\n                <div className=\"lion-message-text\">{msg.text}</div>\n              </div>\n            </div>\n          ))}\n          \n          {options.length > 0 && (\n            <div className=\"lion-options\">\n              {options.map((option, index) => (\n                <button \n                  key={index} \n                  className=\"lion-option-btn\"\n                  onClick={() => handleOptionClick(option)}\n                >\n                  {option}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"lion-input\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Message LION PRO DEV...\"\n            className=\"lion-message-input\"\n          />\n          <div className=\"lion-footer\">Â© 2023 LION PRO DEV</div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}