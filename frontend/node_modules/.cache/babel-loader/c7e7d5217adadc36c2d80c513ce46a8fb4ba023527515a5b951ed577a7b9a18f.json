{"ast":null,"code":"// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n//             if (!response.body) throw new Error('No response body');\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n// export default App;\nimport{useState,useRef,useEffect}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[promptArea,setPromptArea]=useState('');const[chatHistory,setChatHistory]=useState([{sender:'bot',message:'Hello! How can I assist you today?'}]);const[isLoading,setIsLoading]=useState(false);const messagesEndRef=useRef(null);useEffect(()=>{if(messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:'smooth'});}},[chatHistory]);const handleSubmit=async()=>{const userMessage=promptArea.trim();if(!userMessage)return;setChatHistory(prev=>[...prev,{sender:'user',message:userMessage}]);setPromptArea('');setIsLoading(true);const url=process.env.NODE_ENV==='production'?'/api/prompt':'http://localhost:3050/api/prompt';let tmpPromptResponse='';try{const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt:userMessage})});if(!response.body)throw new Error('No response body');const reader=response.body.getReader();const decoder=new TextDecoder();while(true){const{value,done}=await reader.read();if(done)break;tmpPromptResponse+=decoder.decode(value,{stream:true});}tmpPromptResponse=tmpPromptResponse.replace(/\\*/g,'');tmpPromptResponse=tmpPromptResponse.replace(/\\n/g,'<br />');setChatHistory(prev=>[...prev,{sender:'bot',message:tmpPromptResponse}]);}catch(error){console.error('Error:',error);setChatHistory(prev=>[...prev,{sender:'bot',message:'Error communicating with the server.'}]);}finally{setIsLoading(false);}};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSubmit();}};return/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Lion Pro Dev AI Assistant\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-dot\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Online\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",children:[chatHistory.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(msg.sender),dangerouslySetInnerHTML:{__html:msg.message}},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"input-textarea\",rows:2,placeholder:\"Type your message...\",onChange:e=>setPromptArea(e.target.value),value:promptArea,onKeyDown:handleKeyPress}),/*#__PURE__*/_jsx(\"button\",{className:\"send-button\",onClick:handleSubmit,disabled:isLoading,children:isLoading?/*#__PURE__*/_jsxs(\"span\",{className:\"loading-dots\",children:[/*#__PURE__*/_jsx(\"span\",{children:\".\"}),/*#__PURE__*/_jsx(\"span\",{children:\".\"}),/*#__PURE__*/_jsx(\"span\",{children:\".\"})]}):/*#__PURE__*/_jsxs(\"svg\",{width:\"20\",height:\"20\",viewBox:\"0 0 24 24\",fill:\"none\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M22 2L11 13\",stroke:\"currentColor\",strokeWidth:\"2\",strokeLinecap:\"round\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M22 2L15 22L11 13L2 9L22 2Z\",stroke:\"currentColor\",strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})]})})]})]})});}export default App;","map":{"version":3,"names":["useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","App","promptArea","setPromptArea","chatHistory","setChatHistory","sender","message","isLoading","setIsLoading","messagesEndRef","current","scrollIntoView","behavior","handleSubmit","userMessage","trim","prev","url","process","env","NODE_ENV","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","Error","reader","getReader","decoder","TextDecoder","value","done","read","decode","stream","replace","error","console","handleKeyPress","e","key","shiftKey","preventDefault","className","children","map","msg","index","concat","dangerouslySetInnerHTML","__html","ref","rows","placeholder","onChange","target","onKeyDown","onClick","disabled","width","height","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin"],"sources":["D:/Lionprodev/frontend/src/App.js"],"sourcesContent":["// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there ðŸ‘‹\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n\n//             if (!response.body) throw new Error('No response body');\n\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n\nimport { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [promptArea, setPromptArea] = useState('');\n    const [chatHistory, setChatHistory] = useState([\n        { sender: 'bot', message: 'Hello! How can I assist you today?' },\n    ]);\n    const [isLoading, setIsLoading] = useState(false);\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatHistory]);\n\n    const handleSubmit = async () => {\n        const userMessage = promptArea.trim();\n        if (!userMessage) return;\n\n        setChatHistory((prev) => [\n            ...prev,\n            { sender: 'user', message: userMessage },\n        ]);\n        setPromptArea('');\n        setIsLoading(true);\n        \n      const url = process.env.NODE_ENV === 'production' ? '/api/prompt' : 'http://localhost:3050/api/prompt';\nlet tmpPromptResponse = '';\ntry {\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ prompt: userMessage }),\n    });\n\n    if (!response.body) throw new Error('No response body');\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n\n    while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n\n        tmpPromptResponse += decoder.decode(value, { stream: true });\n    }\n\n    tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');\n    tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');\n\n    setChatHistory((prev) => [\n        ...prev,\n        { sender: 'bot', message: tmpPromptResponse },\n    ]);\n} catch (error) {\n    console.error('Error:', error);\n    setChatHistory((prev) => [\n        ...prev,\n        { sender: 'bot', message: 'Error communicating with the server.' },\n    ]);\n} finally {\n    setIsLoading(false);\n}\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSubmit();\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-card\">\n                <div className=\"chat-header\">\n                    <div className=\"header-content\">\n                        <h2>Lion Pro Dev AI Assistant</h2>\n                        <div className=\"status-indicator\">\n                            <span className=\"status-dot\"></span>\n                            <span>Online</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"chat-box\">\n                    <div className=\"messages\">\n                        {chatHistory.map((msg, index) => (\n                            <div\n                                key={index}\n                                className={`message ${msg.sender}`}\n                                dangerouslySetInnerHTML={{ __html: msg.message }}\n                            />\n                        ))}\n                        <div ref={messagesEndRef} />\n                    </div>\n                </div>\n                <div className=\"chat-input\">\n                    <textarea\n                        className=\"input-textarea\"\n                        rows={2}\n                        placeholder=\"Type your message...\"\n                        onChange={(e) => setPromptArea(e.target.value)}\n                        value={promptArea}\n                        onKeyDown={handleKeyPress}\n                    />\n                    <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n                        {isLoading ? (\n                            <span className=\"loading-dots\">\n                                <span>.</span><span>.</span><span>.</span>\n                            </span>\n                        ) : (\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\n                                <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n                                <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                            </svg>\n                        )}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}