{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lionprodev\\\\frontend\\\\lionprodev\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there 👋\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n\n//             if (!response.body) throw new Error('No response body');\n\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\nimport { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [promptArea, setPromptArea] = useState('');\n  const [chatHistory, setChatHistory] = useState([{\n    sender: 'bot',\n    message: 'مرحبًا! 👋\\nنحن عادةً نرد في غضون دقائق.'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTranslated, setIsTranslated] = useState(false); // To track language state\n  const [englishResponse, setEnglishResponse] = useState('');\n  const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n  // Auto-scroll to the bottom whenever the chatHistory changes\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatHistory]);\n  const handleSubmit = async () => {\n    const userMessage = promptArea.trim();\n    if (!userMessage) return;\n\n    // Add user's message to chat history\n    setChatHistory(prev => [...prev, {\n      sender: 'user',\n      message: userMessage\n    }]);\n    setPromptArea(''); // Clear the input after submitting\n    setIsLoading(true); // Start loading\n\n    const translatedMessage = await translateToArabic(userMessage);\n    const url = 'http://localhost:3050/api/prompt';\n    let tmpPromptResponse = '';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: translatedMessage\n        })\n      });\n      if (!response.body) throw new Error('No response body');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        tmpPromptResponse += decoder.decode(value, {\n          stream: true\n        });\n      }\n\n      // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n      tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, ''); // Remove asterisks (if any)\n      tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />'); // Adding line breaks\n\n      const translatedResponse = await translateToArabic(tmpPromptResponse);\n      const englishResponse = await translateToEnglish(tmpPromptResponse);\n\n      // Once the full response is received, update the state\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: translatedResponse,\n        englishMessage: englishResponse\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      setChatHistory(prev => [...prev, {\n        sender: 'bot',\n        message: 'حدث خطأ أثناء التواصل مع الخادم.'\n      }]);\n    } finally {\n      setIsLoading(false); // End loading\n    }\n  };\n  const translateToArabic = async text => {\n    const url = `https://translation.googleapis.com/language/translate/v2?key=AIzaSyB2fzxhLsw--ksiDO6_yqb0wsM4f4JuIdI`;\n    const body = JSON.stringify({\n      q: text,\n      target: 'ar'\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      if (!response.ok) {\n        throw new Error('Translation API request failed');\n      }\n      const data = await response.json();\n\n      // Check if 'translations' exists in the response\n      if (data.data && data.data.translations && data.data.translations[0]) {\n        return data.data.translations[0].translatedText;\n      } else {\n        throw new Error('No translations found in API response');\n      }\n    } catch (error) {\n      console.error('Error translating to Arabic:', error);\n      return 'خطأ في الترجمة'; // Return an error message in Arabic if something goes wrong\n    }\n  };\n  const translateToEnglish = async text => {\n    const url = `https://translation.googleapis.com/language/translate/v2?key=AIzaSyB2fzxhLsw--ksiDO6_yqb0wsM4f4JuIdI`;\n    const body = JSON.stringify({\n      q: text,\n      target: 'en'\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      if (!response.ok) {\n        throw new Error('Translation API request failed');\n      }\n      const data = await response.json();\n\n      // Check if 'translations' exists in the response\n      if (data.data && data.data.translations && data.data.translations[0]) {\n        return data.data.translations[0].translatedText;\n      } else {\n        throw new Error('No translations found in API response');\n      }\n    } catch (error) {\n      console.error('Error translating to English:', error);\n      return 'Translation error'; // Return a generic error message in English if something goes wrong\n    }\n  };\n  const toggleTranslation = () => {\n    setIsTranslated(!isTranslated);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n      handleSubmit();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0627\\u0644\\u062F\\u0631\\u062F\\u0634\\u0629 \\u0645\\u0639 \\u0627\\u0644\\u0630\\u0643\\u0627\\u0621 \\u0627\\u0644\\u0627\\u0635\\u0637\\u0646\\u0627\\u0639\\u064A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            dangerouslySetInnerHTML: {\n              __html: msg.message\n            } // Render message with HTML (line breaks)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"input-textarea\",\n          rows: 2,\n          placeholder: \"\\u0627\\u0643\\u062A\\u0628 \\u0631\\u0633\\u0627\\u0644\\u062A\\u0643...\",\n          onChange: e => setPromptArea(e.target.value),\n          value: promptArea,\n          onKeyDown: handleKeyPress // Listen for Enter key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSubmit,\n          disabled: isLoading,\n          children: isLoading ? 'إرسال...' : 'إرسال'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), chatHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"translate-button\",\n        onClick: toggleTranslation,\n        children: isTranslated ? 'Show Arabic' : 'Show English'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }, this), chatHistory.length > 0 && isTranslated && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-response\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: chatHistory[chatHistory.length - 1].englishMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"F6p6OZspJopztcXp24dJOqwl3c8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","promptArea","setPromptArea","chatHistory","setChatHistory","sender","message","isLoading","setIsLoading","isTranslated","setIsTranslated","englishResponse","setEnglishResponse","messagesEndRef","current","scrollIntoView","behavior","handleSubmit","userMessage","trim","prev","translatedMessage","translateToArabic","url","tmpPromptResponse","response","fetch","method","headers","body","JSON","stringify","prompt","Error","reader","getReader","decoder","TextDecoder","value","done","read","decode","stream","replace","translatedResponse","translateToEnglish","englishMessage","error","console","text","q","target","ok","data","json","translations","translatedText","toggleTranslation","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","dangerouslySetInnerHTML","__html","ref","rows","placeholder","onChange","onKeyDown","onClick","disabled","length","_c","$RefreshReg$"],"sources":["D:/Lionprodev/frontend/lionprodev/src/App.js"],"sourcesContent":["// import { useState, useRef, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//     const [promptArea, setPromptArea] = useState('');\n//     const [chatHistory, setChatHistory] = useState([\n//         { sender: 'bot', message: 'Hi there 👋\\nWe typically reply within a few minutes.' },\n//     ]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n//     // Auto-scroll to the bottom whenever the chatHistory changes\n//     useEffect(() => {\n//         if (messagesEndRef.current) {\n//             messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//         }\n//     }, [chatHistory]);\n\n//     const handleSubmit = async () => {\n//         const userMessage = promptArea.trim();\n//         if (!userMessage) return;\n\n//         // Add user's message to chat history\n//         setChatHistory((prev) => [\n//             ...prev,\n//             { sender: 'user', message: userMessage },\n//         ]);\n//         setPromptArea(''); // Clear the input after submitting\n//         setIsLoading(true); // Start loading\n\n//         const url = 'http://localhost:3050/api/prompt';\n//         let tmpPromptResponse = '';\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ prompt: userMessage }),\n//             });\n\n//             if (!response.body) throw new Error('No response body');\n\n//             const reader = response.body.getReader();\n//             const decoder = new TextDecoder();\n\n//             while (true) {\n//                 const { value, done } = await reader.read();\n//                 if (done) break;\n\n//                 tmpPromptResponse += decoder.decode(value, { stream: true });\n//             }\n\n//             // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n//             tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n//             // Once the full response is received, update the state\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: tmpPromptResponse },\n//             ]);\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setChatHistory((prev) => [\n//                 ...prev,\n//                 { sender: 'bot', message: 'Error communicating with the server.' },\n//             ]);\n//         } finally {\n//             setIsLoading(false); // End loading\n//         }\n//     };\n\n//     const handleKeyPress = (e) => {\n//         if (e.key === 'Enter' && !e.shiftKey) {\n//             e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n//             handleSubmit();\n//         }\n//     };\n\n//     return (\n//         <div className=\"chat-container\">\n//             <div className=\"chat-card\">\n//                 <div className=\"chat-header\">\n//                     <h2>Chat with Our AI</h2>\n//                 </div>\n//                 <div className=\"chat-box\">\n//                     <div className=\"messages\">\n//                         {chatHistory.map((msg, index) => (\n//                             <div\n//                                 key={index}\n//                                 className={`message ${msg.sender}`}\n//                                 dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n//                             >\n//                             </div>\n//                         ))}\n//                         <div ref={messagesEndRef} /> {/* Scroll reference */}\n//                     </div>\n//                 </div>\n//                 <div className=\"chat-input\">\n//                     <textarea\n//                         className=\"input-textarea\"\n//                         rows={2}\n//                         placeholder=\"Type your message...\"\n//                         onChange={(e) => setPromptArea(e.target.value)}\n//                         value={promptArea}\n//                         onKeyDown={handleKeyPress} // Listen for Enter key\n//                     />\n//                     <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n//                         {isLoading ? 'Sending...' : 'Send'}\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\nimport { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [promptArea, setPromptArea] = useState('');\n    const [chatHistory, setChatHistory] = useState([\n        { sender: 'bot', message: 'مرحبًا! 👋\\nنحن عادةً نرد في غضون دقائق.' },\n    ]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isTranslated, setIsTranslated] = useState(false); // To track language state\n    const [englishResponse, setEnglishResponse] = useState('');\n    const messagesEndRef = useRef(null); // Reference for auto-scrolling\n\n    // Auto-scroll to the bottom whenever the chatHistory changes\n    useEffect(() => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatHistory]);\n\n    const handleSubmit = async () => {\n        const userMessage = promptArea.trim();\n        if (!userMessage) return;\n\n        // Add user's message to chat history\n        setChatHistory((prev) => [\n            ...prev,\n            { sender: 'user', message: userMessage },\n        ]);\n        setPromptArea(''); // Clear the input after submitting\n        setIsLoading(true); // Start loading\n\n        const translatedMessage = await translateToArabic(userMessage);\n\n        const url = 'http://localhost:3050/api/prompt';\n        let tmpPromptResponse = '';\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ prompt: translatedMessage }),\n            });\n\n            if (!response.body) throw new Error('No response body');\n\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { value, done } = await reader.read();\n                if (done) break;\n\n                tmpPromptResponse += decoder.decode(value, { stream: true });\n            }\n\n            // Fix: Adding line breaks and sanitizing for asterisks or any unwanted characters\n            tmpPromptResponse = tmpPromptResponse.replace(/\\*/g, '');  // Remove asterisks (if any)\n            tmpPromptResponse = tmpPromptResponse.replace(/\\n/g, '<br />');  // Adding line breaks\n\n            const translatedResponse = await translateToArabic(tmpPromptResponse);\n            const englishResponse = await translateToEnglish(tmpPromptResponse);\n\n            // Once the full response is received, update the state\n            setChatHistory((prev) => [\n                ...prev,\n                { sender: 'bot', message: translatedResponse, englishMessage: englishResponse },\n            ]);\n        } catch (error) {\n            console.error('Error:', error);\n            setChatHistory((prev) => [\n                ...prev,\n                { sender: 'bot', message: 'حدث خطأ أثناء التواصل مع الخادم.' },\n            ]);\n        } finally {\n            setIsLoading(false); // End loading\n        }\n    };\n\n    const translateToArabic = async (text) => {\n        const url = `https://translation.googleapis.com/language/translate/v2?key=AIzaSyB2fzxhLsw--ksiDO6_yqb0wsM4f4JuIdI`;\n        const body = JSON.stringify({\n            q: text,\n            target: 'ar',\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: body,\n            });\n\n            if (!response.ok) {\n                throw new Error('Translation API request failed');\n            }\n\n            const data = await response.json();\n\n            // Check if 'translations' exists in the response\n            if (data.data && data.data.translations && data.data.translations[0]) {\n                return data.data.translations[0].translatedText;\n            } else {\n                throw new Error('No translations found in API response');\n            }\n        } catch (error) {\n            console.error('Error translating to Arabic:', error);\n            return 'خطأ في الترجمة'; // Return an error message in Arabic if something goes wrong\n        }\n    };\n\n    const translateToEnglish = async (text) => {\n        const url = `https://translation.googleapis.com/language/translate/v2?key=AIzaSyB2fzxhLsw--ksiDO6_yqb0wsM4f4JuIdI`;\n        const body = JSON.stringify({\n            q: text,\n            target: 'en',\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: body,\n            });\n\n            if (!response.ok) {\n                throw new Error('Translation API request failed');\n            }\n\n            const data = await response.json();\n\n            // Check if 'translations' exists in the response\n            if (data.data && data.data.translations && data.data.translations[0]) {\n                return data.data.translations[0].translatedText;\n            } else {\n                throw new Error('No translations found in API response');\n            }\n        } catch (error) {\n            console.error('Error translating to English:', error);\n            return 'Translation error'; // Return a generic error message in English if something goes wrong\n        }\n    };\n\n    const toggleTranslation = () => {\n        setIsTranslated(!isTranslated);\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault(); // Prevent default behavior of Enter key (adding new line)\n            handleSubmit();\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-card\">\n                <div className=\"chat-header\">\n                    <h2>الدردشة مع الذكاء الاصطناعي</h2>\n                </div>\n                <div className=\"chat-box\">\n                    <div className=\"messages\">\n                        {chatHistory.map((msg, index) => (\n                            <div\n                                key={index}\n                                className={`message ${msg.sender}`}\n                                dangerouslySetInnerHTML={{ __html: msg.message }} // Render message with HTML (line breaks)\n                            >\n                            </div>\n                        ))}\n                        <div ref={messagesEndRef} /> {/* Scroll reference */}\n                    </div>\n                </div>\n                <div className=\"chat-input\">\n                    <textarea\n                        className=\"input-textarea\"\n                        rows={2}\n                        placeholder=\"اكتب رسالتك...\"\n                        onChange={(e) => setPromptArea(e.target.value)}\n                        value={promptArea}\n                        onKeyDown={handleKeyPress} // Listen for Enter key\n                    />\n                    <button className=\"send-button\" onClick={handleSubmit} disabled={isLoading}>\n                        {isLoading ? 'إرسال...' : 'إرسال'}\n                    </button>\n                </div>\n                {/* Translate Button */}\n                {chatHistory.length > 0 && (\n                    <button\n                        className=\"translate-button\"\n                        onClick={toggleTranslation}\n                    >\n                        {isTranslated ? 'Show Arabic' : 'Show English'}\n                    </button>\n                )}\n                {chatHistory.length > 0 && isTranslated && (\n                    <div className=\"translated-response\">\n                        <p>{chatHistory[chatHistory.length - 1].englishMessage}</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}